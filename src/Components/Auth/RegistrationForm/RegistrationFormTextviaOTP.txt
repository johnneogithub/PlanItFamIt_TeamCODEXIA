import React, { useState, useEffect } from "react";
import { addYears } from 'date-fns';

// Firebase Auth and Firestore
import { getFirestore, doc, runTransaction, setDoc } from "firebase/firestore";
import {
  getAuth,
  createUserWithEmailAndPassword,
  fetchSignInMethodsForEmail,
  RecaptchaVerifier,
  signInWithPhoneNumber,
} from "firebase/auth";

// React Router and Date Picker
import { useHistory, useLocation } from "react-router-dom";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

// Modals
import TermsAndConditionsModal from "./TermsAndConditionsModal";
import DataPrivacyPlanItFamIt from "./DataPrivacyPlanItFamIt";

// Assets
import background1 from '../../Assets/landing_page_bkg1.png';
import { FaFacebookF, FaEnvelope } from "react-icons/fa";


function RegistrationForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [firstName, setFirstName] = useState("");
  const [middleInitial, setMiddleInitial] = useState("");
  const [lastName, setLastName] = useState("");
  const [birthdate, setBirthdate] = useState(null);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [errorMessage, setErrorMessage] = useState(""); // For showing errors
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [agreedToPrivacy, setAgreedToPrivacy] = useState(false);
  const [termsModalIsOpen, setTermsModalIsOpen] = useState(false);
  const [privacyModalIsOpen, setPrivacyModalIsOpen] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false); // Added
  const history = useHistory();
  const location = useLocation();

  const calculateAge = (birthdate) => {
    const today = new Date();
    const birthDate = new Date(birthdate);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();
    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  };

  const ageValidation = (birthdate) => {
    const age = calculateAge(birthdate);
    if (age < 20) {
      setErrorMessage("You must be at least 20 years old to register.");
      return false;
    }
    setErrorMessage(""); // Clear error if age is valid
    return true;
  };

// Inside your RegistrationForm component
const setupRecaptcha = () => {
  const auth = getAuth(); 
  if (window.recaptchaVerifier) {
    window.recaptchaVerifier.clear(); 
  }

  // Firebase >= v9: order of parameters
  window.recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
    size: 'invisible',  // Invisible reCAPTCHA
    callback: (response) => { 
      console.log("reCAPTCHA solved", response);
    },
  });
};

// Call setupRecaptcha when component mounts
useEffect(() => {
  setupRecaptcha();
}, []);
  
  const SignUp = async (e) => {
    e.preventDefault();
  
    let errorMessages = [];
  
    // Age validation
    if (!ageValidation(birthdate)) {
      errorMessages.push("You must be at least 20 years old to register.");
    }
  
    // Phone number validation (Philippine number with 11 digits)
    const phoneRegex = /^(09|\+639)\d{9}$/;
    if (!phoneRegex.test(phoneNumber)) {
      errorMessages.push("Please enter a valid Philippine phone number (11 digits).");
    }
  
    // Password matching validation
    if (password !== confirmPassword) {
      errorMessages.push("Passwords don't match!");
    }
  
    // Terms and Privacy validation
    if (!agreedToTerms || !agreedToPrivacy) {
      errorMessages.push("You must agree to both Terms and Conditions and Privacy Policy.");
    }
  
    // If there are errors, show them and stop submission
    if (errorMessages.length > 0) {
      setErrorMessage(errorMessages.join("\n"));  // Join all error messages with a newline
      return;
    } else {
      setErrorMessage("");  // Clear any previous error messages
    }
  
    // Proceed with registration process...
    const auth = getAuth();
    const firestore = getFirestore();
    try {
      // Check if the email is already registered
      const existingUser = await fetchSignInMethodsForEmail(auth, email);
      if (existingUser.length > 0) {
        alert("This email is already registered.");
        return;
      }
  
      // Create user in Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
  
      // Save user details to Firestore
      const userRef = doc(firestore, 'users', user.uid);
      await setDoc(userRef, {
        firstName,
        middleInitial,
        lastName,
        email,
        birthdate: birthdate.toISOString(),
        createdAt: new Date().toISOString(),
      });
  
      setRegistrationSuccess(true);
      alert("Registration successful. Please check your phone for OTP, click 'when' done reading this message.");
      history.push("/VerifyYourAccountViaOTP");
  
    } catch (error) {
      console.error("Error during registration:", error.message);
      alert("Error: " + error.message);
    }
  
    const userCountRef = doc(firestore, 'statistics', 'userCount');
    await runTransaction(firestore, async (transaction) => {
      const userCountDoc = await transaction.get(userCountRef);
      if (!userCountDoc.exists()) {
        transaction.set(userCountRef, { count: 1 });
      } else {
        const newCount = userCountDoc.data().count + 1;
        transaction.update(userCountRef, { count: newCount });
      }
    });
  };

  const closeTermsModal = () => setTermsModalIsOpen(false);
  const agreeToTerms = () => setAgreedToTerms(true);

  const closePrivacyModal = () => setPrivacyModalIsOpen(false);
  const agreeToPrivacy = () => setAgreedToPrivacy(true);

  const handleTermsCheckboxChange = () => setAgreedToTerms((prev) => !prev);
  const handlePrivacyCheckboxChange = () => setAgreedToPrivacy((prev) => !prev);

  const openTermsModal = (e) => {
    if (e) e.preventDefault();
    history.push("/Register/TermsAndConditions");
  };

  const openPrivacyModal = (e) => {
    if (e) e.preventDefault();
    history.push("/Register/DataPrivacyAct");
  };

  useEffect(() => {
    if (location.pathname === "/Register/TermsAndConditions") {
      setTermsModalIsOpen(true);
    } else {
      setTermsModalIsOpen(false);
    }

    if (location.pathname === "/Register/DataPrivacyAct") {
      setPrivacyModalIsOpen(true);
    } else {
      setPrivacyModalIsOpen(false);
    }
  }, [location.pathname]);

  return (
    <>
      <div id="recaptcha-container"></div>

      <TermsAndConditionsModal
        isOpen={termsModalIsOpen}
        onClose={closeTermsModal}
        onAgree={agreeToTerms}
      />

      <DataPrivacyPlanItFamIt
        isOpen={privacyModalIsOpen}
        onClose={closePrivacyModal}
        onAgree={agreeToPrivacy}
      />

      <div className="registration-section">
        <div className="container-fluid">
          <div className="row d-flex justify-content-center align-items-center">
            <div className="col-md-9 col-lg-6 col-xl-5">
              <img src={background1} className="img-fluid" alt="Log/Regis Illustration" />
            </div>

            <div className="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
              <form onSubmit={SignUp} className="registration-form">
                <div className="form-outline mb-8">
                  <label className="form-label">Email address</label>
                  <input
                    type="email"
                    className="form-control form-control-lg"
                    placeholder="Enter a valid email address"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>

                <div className="d-flex justify-content-between mb-3">
                  <div className="form-outline me-2">
                    <label className="form-label">First Name</label>
                    <input type="text" className="form-control form-control-lg"
                      placeholder="First Name"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)} />
                  </div>
                  <div className="form-outline me-2">
                    <label className="form-label">Middle Initial</label>
                    <input type="text" className="form-control form-control-lg"
                      placeholder="M.I. (Optional)"
                      value={middleInitial}
                      onChange={(e) => setMiddleInitial(e.target.value)} />
                  </div>
                  <div className="form-outline">
                    <label className="form-label">Last Name</label>
                    <input type="text" className="form-control form-control-lg"
                      placeholder="Last Name"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)} />
                  </div>
                </div>

                <div className="d-flex justify-content-between mb-3">
                  <div className="form-outline me-2">
                    <label className="form-label">Birthdate</label>
                    <DatePicker
                      selected={birthdate}
                      onChange={(date) => setBirthdate(date)}
                      dateFormat="MMMM d, yyyy"
                      className="form-control"
                      placeholderText="Select your birthdate"
                      showYearDropdown
                      scrollableYearDropdown
                      maxDate={addYears(new Date(), 50)}
                      minDate={new Date(1900, 0, 1)}
                      isClearable
                    />
                    {birthdate && <small className="text-muted">Age: {calculateAge(birthdate)}</small>}
                  </div>
                  <div className="form-outline">
                    <label className="form-label">Phone Number</label>
                    <input
                      type="text"
                      className="form-control"
                      placeholder="Enter phone number"
                      value={phoneNumber}
                      onChange={(e) => setPhoneNumber(e.target.value)}
                    />
                  </div>
                </div>

                <div className="form-outline mb-3">
                  <label className="form-label">Password</label>
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Enter password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>

                <div className="form-outline mb-3">
                  <label className="form-label">Confirm Password</label>
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Confirm your password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                  />
                </div>

                <div className="row mb-3">
                  <div className="col-md-6">
                    <div className="form-check">
                      <input
                        type="checkbox"
                        checked={agreedToTerms}
                        className="form-check-input me-2"
                        onChange={handleTermsCheckboxChange}
                      />
                      <label>
                        <a href="#" onClick={openTermsModal}>
                          Terms and Conditions
                        </a>
                      </label>
                    </div>
                  </div>
                  <div className="col-md-6">
                    <div className="form-check">
                      <input
                        type="checkbox"
                        checked={agreedToPrivacy}
                        className="form-check-input me-2"
                        onChange={handlePrivacyCheckboxChange}
                      />
                      <label>
                        <a href="#" onClick={openPrivacyModal}>
                          Data Privacy Act of 2012
                        </a>
                      </label>
                    </div>
                  </div>
                </div>

                <div className="text-center text-lg-start mt-4 pt-2">
                  <button
                    type="submit"
                    className="btn-login"
                    style={{ paddingLeft: "2.5rem", paddingRight: "2.5rem" }}
                    disabled={!agreedToTerms || !agreedToPrivacy}
                  >
                    Register Now!
                  </button>
                  <p className="small fw-bold mt-2 pt-1 mb-0">
                    Already have an account?{" "}
                    <a href="/Login" className="link-danger">
                      Login
                    </a>
                  </p>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      {errorMessage && (
        <div className="alert alert-danger" role="alert">
          <pre>{errorMessage}</pre>
        </div>
      )}

      {registrationSuccess && (
        <p style={{ color: "green" }}>Successfully registered! Please check your email to verify your account.</p>
      )}
    </>
  );
}

export default RegistrationForm;